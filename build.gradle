buildscript {
	repositories {
        	if (System.getenv('BUILD_SERVER') || System.getProperty('CERN_TECHNET_VM')) {
			maven {
				url 'http://artifactory.cern.ch/repo'
			}
			maven {
				url 'http://artifactory.cern.ch/jcenter'
			}
        	} else {
			mavenCentral()
			jcenter()
        	}
	}
	dependencies {
			classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0"
	}
}

repositories {
    if (System.getenv('BUILD_SERVER') || System.getProperty('CERN_TECHNET_VM')) {
		maven {
			url 'http://artifactory.cern.ch/repo'
		}
		maven {
			url 'http://artifactory.cern.ch/jcenter'
		}
    } else {
		mavenCentral()
		jcenter()
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

if(System.getenv('TRAVIS')){
    apply plugin: 'io.codearte.nexus-staging'
    apply from : './scripts/deploy.gradle'

    cobertura.coverageFormats = ['html', 'xml']
    cobertura.coverageSourceDirs = sourceSets.main.java.srcDirs
}

group 'org.streamingpool'

sourceCompatibility = 1.8

dependencies {
	compile 'org.reactivestreams:reactive-streams:1.0.0'
	compile 'io.reactivex.rxjava2:rxjava:2.1.0'
	compile 'com.typesafe.akka:akka-stream_2.11:2.4.16'
	compile 'org.springframework:spring-core:4.3.5.RELEASE'
	compile 'org.springframework:spring-context:4.3.5.RELEASE'
	compile 'org.springframework:spring-test:4.3.5.RELEASE' // Testing utils in /src/java for the moment

	compile 'org.slf4j:slf4j-api:1.7.21'

	compile 'com.google.guava:guava:20.0'

	compile 'junit:junit:4.12' // Testing utils in /src/java for the moment
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	compile 'org.mockito:mockito-core:1.10.19' // Testing utils in /src/java for the moment
	testCompile 'org.assertj:assertj-core:3.6.1'
}

sourceSets {
	main {
		java {
			srcDir 'src/java'
		}
	}
	test {
		java {
			srcDir 'src/test'
		}
	}
}

javadoc {  options.encoding = "UTF-8" }

task wrapper(type: Wrapper) { gradleVersion = '3.3' }

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives javadocJar, sourcesJar }
