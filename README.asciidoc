
image:https://img.shields.io/travis/streamingpool/streamingpool-core/master.svg[]
image:https://img.shields.io/github/release/streamingpool/streamingpool-core.svg[]
image:https://img.shields.io/github/license/streamingpool/streamingpool-core.svg[]

== Getting Started
In order to use the Streaming Pool, just get the latest version from https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22streamingpool-core%22[Maven Central].

Maven:
[source,xml]
----
<dependency>
    <groupId>org.streamingpool</groupId>
    <artifactId>streamingpool-core</artifactId>
    <version>X.Y.Z</version>
</dependency>
----
Gradle:
[source,groovy]
----
compile 'org.streamingpool:streamingpool-core:X.Y.Z'
----

It is possible to check the examples by cloning this repository and checking the `src/examples` folder.
There, core functionality of the Streaming Pool project are explained.

Keep in mind that Streaming Pool assumes that http://projects.spring.io/spring-framework/[Spring Framework] is used for managing the application Beans.

== Motivation
When connecting together heterogeneous and complex systems, it is not easy to exchange data between components. Streams of data are successfully used in industry in order to overcome this problem, especially in the case of "live" data. Streams are a specialization of the Observer design pattern and they provide asynchronous and non-blocking data flow.

The ongoing effort of the http://reactivex.io/[ReactiveX] initiative is one example that demonstrates how demanding this technology is even for big companies. Bridging the discrepancies of different technologies with common interfaces is already done by the http://www.reactive-streams.org/[Reactive Streams] initiative and, in the JVM world, via https://github.com/reactive-streams/reactive-streams-jvm[reactive-streams-jvm] interfaces.

Streaming Pool is a framework for providing and discovering reactive streams. Through the mechanism of dependency injection provided by the http://projects.spring.io/spring-framework/[Spring Framework], Streaming Pool provides a so called `DiscoveryService`. This object can discover and chain streams of data that are technologically agnostic, through the use of `StreamId`. The stream to be discovered must be present in the Streaming Pool system (by providing it using the `ProvidingService`) or it must be possible to create it (using one of the registered `StreamFactory`). In the latter case, the stream is lazily created on demand.
The application (client) that uses a stream does not need to know which is the source of the information, it may be a component of the application itself or a distributed system. In this way, it is possible to create truly decoupled systems that are resilient to changes and are easy to mock or test.
